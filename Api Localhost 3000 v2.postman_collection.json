{
	"info": {
		"_postman_id": "cf3cccf6-eefa-4b93-b4cd-3880de4928b9",
		"name": "Api Localhost 3000 v2",
		"description": "Curso de QA - Postman\n\ntoken github:\n\n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",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23595251"
	},
	"item": [
		{
			"name": "Localhost Users",
			"item": [
				{
					"name": "Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key:\"G-TOKEN\",\r",
									"    value:\"ROM831ESV\"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 404\", function(){\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddUsers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key:\"G-TOKEN\",\r",
									"    value:\"ROM831ESV\"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"Usuario02@gmail.com\",\r\n    \"firstName\": \"Prueba\",\r\n    \"lastName\": \"apellido 02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users por id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key:\"G-TOKEN\",\r",
									"    value:\"ROM831ESV\"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": null,
									"value": null,
									"description": "404Not Found porque se elimino el recurso",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AddUserRandom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData = JSON.parse(responseBody) //version antigua\r",
									"var jsonData = pm.response.json() //se obtiene la data\r",
									"// console.log(jsonData) //imprimir data\r",
									"\r",
									"// creamos variables de coleccion\r",
									"                        // (key y value id esta en json) \r",
									"// obtenemos  el id que nos servira para put o delete \r",
									"pm.collectionVariables.set(\"userId\", jsonData.id)\r",
									"console.log(\"user Created:\" + pm.collectionVariables.get(\"userId\"))\r",
									"\r",
									"// test agregamos 201 para capturar el estado y ver el test Results\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body match String\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// 02\r",
									"// console.log(jsonData.login); // Ejemplo de acceso a un campo espec√≠fico\r",
									"\r",
									"// 03\r",
									"// Verificar el contenido de la respuesta:\r",
									"// pm.test(\"Response contains login\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData).to.have.property('login');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key:\"G-TOKEN\",\r",
									"    value:\"ROM831ESV\"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddUserRandom Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// test agregamos 201 para capturar el estado y ver el test Results\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"userId\", jsonData.id)\r",
									"console.log(\"User Created:\" + pm.collectionVariables.get(\"userId\"))\r",
									"\r",
									"\r",
									"pm.test(\"Body match String\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//cargar data desde JSON\r",
									"var email = data.email\r",
									"var firstname = data.firstname\r",
									"var lastname = data.lastname\r",
									"\r",
									"pm.variables.set(\"json_email\", email)\r",
									"pm.variables.set(\"json_firstname\", firstname)\r",
									"pm.variables.set(\"json_lastname\", lastname)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{json_email}}\",\r\n    \"firstName\": \"{{json_firstname}}\",\r\n    \"lastName\": \"{{json_lastname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddUserRandom CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// test agregamos 201 para capturar el estado y ver el test Results\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"userId\", jsonData.id)\r",
									"console.log(\"User Created:\" + pm.collectionVariables.get(\"userId\"))\r",
									"\r",
									"\r",
									"pm.test(\"Body match String\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//cargar data desde JSON\r",
									"var email = data.email\r",
									"var firstname = data.firstname\r",
									"var lastname = data.lastname\r",
									"\r",
									"pm.variables.set(\"json_email\", email)\r",
									"pm.variables.set(\"json_firstname\", firstname)\r",
									"pm.variables.set(\"json_lastname\", lastname)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{json_email}}\",\r\n    \"firstName\": \"{{json_firstname}}\",\r\n    \"lastName\": \"{{json_lastname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body match String\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key:\"G-TOKEN\",\r",
									"    value:\"ROM831ESV\"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"lastName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key:\"G-TOKEN\",\r",
									"    value:\"ROM831ESV\"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users por id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key:\"G-TOKEN\",\r",
									"    value:\"ROM831ESV\"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": null,
									"value": null,
									"description": "404Not Found porque se elimino el recurso",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "admin",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Localhost Books",
			"item": [
				{
					"name": "Retrive books",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrive books 1 recurse",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/books/45",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								"45"
							]
						}
					},
					"response": []
				},
				{
					"name": "add books",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"new books  Danza de los dragones\"\r\n    // \"author\": \"John Piper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/books/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "add books 2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"new books  Danza de los dragones traducida\",\r\n    \"author\": \"John Piper\",\r\n    \"isbn\":\"1593281057\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/books/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar books",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"new books  Danza de los dragones\",\r\n    \"author\": \"John Targaryen\",\r\n    \"isbn\": \"1593281057\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/books/41",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								"41"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//se usa para actualizar el put para actualizar todo el recurso de peticion"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "//actualiza la informacion especificada (cambio de title)\r\n{\r\n    \"title\": \"Los libros Verdes\",\r\n    \"author\": \"Gatitos\",\r\n    \"isbn\": \"1593281056\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/books/30",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								"30"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update books Copy",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"author\": \"La casa Verde\",\r\n    \"isbn\": \"1593281058\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/books/37",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								"37"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar LibroXid",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"description": "204No Content = Recurso eliminado",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/books/41",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								"41"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete books",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "G-TOKEN",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/books/30",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"books",
								"30"
							],
							"query": [
								{
									"key": null,
									"value": null,
									"description": "204 No Content (ES ELIMINADO)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Localhost WishList",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/wishlists/2/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wishlists",
								"2",
								"books"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "admin",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.request.headers.add({\r",
							"    key:\"G-TOKEN\",\r",
							"    value:\"ROM831ESV\"\r",
							"})"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}